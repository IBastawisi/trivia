{"version":3,"sources":["images/delete.svg","images/brain.svg","components/FormView.tsx","components/Question.tsx","components/Search.tsx","components/QuestionView.tsx","components/Header.tsx","components/QuizView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","FormView","props","useState","categories","setCategories","question","answer","difficulty","category","setQuestion","formRef","createRef","useEffect","fetch","then","rsp","json","result","catch","error","alert","handleChange","event","target","name","value","className","onSubmit","preventDefault","method","mode","credentials","headers","body","JSON","stringify","current","reset","ref","type","onChange","map","key","id","Question","visibleAnswer","setVisibleAnswer","src","toLowerCase","alt","style","width","fontSize","onClick","questionAction","Recyclebin","Search","query","setQuery","submitSearch","placeholder","e","QuestionView","questions","page","totalQuestions","currentCategory","state","setState","getQuestions","total_questions","current_category","getByCategory","overflow","searchTerm","find","c","q","ind","action","window","confirm","pageNumbers","maxPage","Math","ceil","i","push","num","createPagination","Header","to","Brain","height","loading","getProps","isCurrent","QuizView","playing","gameover","quizCategory","previousQuestions","showAnswer","numCorrect","currentQuestion","guess","prev","selectCategory","getNextQuestion","category_id","toString","previous_questions","submitGuess","evaluate","evaluateAnswer","restartGame","formatGuess","replace","answerArray","split","includes","length","renderCorrectAnswer","App","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.40bab519.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete.14d7f926.svg\";","module.exports = __webpack_public_path__ + \"static/media/brain.7c401135.svg\";","import React, { useState, useEffect, createRef } from 'react';\nimport { RouteComponentProps } from \"@reach/router\"\n\nconst FormView: React.FC<RouteComponentProps> = (props) => {\n\n  const [categories, setCategories] = useState([] as { id: number, type: string }[])\n\n  const [question, setQuestion] = useState({\n    question: \"\",\n    answer: \"\",\n    difficulty: 1,\n    category: 1,\n  })\n\n  const formRef = createRef<HTMLFormElement>()\n\n  useEffect(() => {\n    //TODO: update request URL\n    fetch(`/categories`).then(rsp => rsp.json()).then(result => {\n      setCategories(result.categories)\n      return;\n    }).catch(error => {\n      alert('Unable to load categories. Please try your request again')\n      return;\n    })\n  }, [])\n\n\n  const submitQuestion = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    fetch('/questions', {\n      method: 'POST',\n      mode: 'cors',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(question),\n    }).then(rsp => rsp.json()).then(result => {\n      formRef.current?.reset();\n      return;\n    }).catch(error => {\n      alert('Unable to add question. Please try your request again')\n      return;\n    })\n  }\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement & HTMLSelectElement>) => {\n    setQuestion({ ...question, [event.target.name]: event.target.value })\n  }\n\n  return (\n    <div className=\"d-flex flex-column align-items-center\">\n      <h2>Add a New Trivia Question</h2>\n      <form className=\"col-sm-6\" onSubmit={submitQuestion} ref={formRef}>\n        <label className=\"w-100\">\n          Question\n            <input type=\"text\" name=\"question\" className=\"form-control mt-2\" onChange={handleChange} />\n        </label>\n        <label className=\"w-100\">\n          Answer\n            <input type=\"text\" name=\"answer\" className=\"form-control mt-2\" onChange={handleChange} />\n        </label>\n        <label className=\"w-100\">\n          Difficulty\n            <select name=\"difficulty\" className=\"form-control mt-2\" onChange={handleChange}>\n            <option value=\"1\">1</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n            <option value=\"5\">5</option>\n          </select>\n        </label>\n        <label className=\"w-100\">\n          Category\n          <select name=\"category\" className=\"form-control mt-2\" onChange={handleChange}>\n            {categories.map(category => <option key={category.id} value={category.id}>{category.type}</option>)}\n          </select>\n        </label>\n        <button type=\"submit\" className=\"btn btn-outline-success\">Submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default FormView;\n","import React, { useState } from 'react';\nimport { RouteComponentProps } from \"@reach/router\"\nimport Recyclebin from \"../images/delete.svg\"\n\nexport type questionModel = {\n  id: number, question: string, answer: string, category: number, difficulty: string\n};\n\n\nexport type QuestionComponentProps = RouteComponentProps & {\n  question: string, answer: string, category: string, difficulty: string,\n  questionAction(action: string): void\n};\n\nconst Question: React.FC<& QuestionComponentProps> = (props) => {\n  const [visibleAnswer, setVisibleAnswer] = useState(false)\n  const { question, answer, category, difficulty } = props;\n  return (\n    <div className=\"card m-1\">\n      <div className=\"card-body p-3\">\n        <div className=\"card-title\">{question}</div>\n        <div className=\"card-text d-flex align-items-center mb-3\">\n          <img src={`${category.toLowerCase()}.svg`} alt={category} style={{ width: 28 }} />\n          <span className=\"px-3\">Difficulty: {difficulty}</span>\n          <button className=\"btn btn-danger btn-sm rounded-circle p-1\" style={{ fontSize: 0 }} onClick={() => props.questionAction('DELETE')}>\n            <img src={Recyclebin} alt=\"Delete\" style={{ width: 16 }} />\n          </button>\n        </div>\n        <div className=\"row m-0 align-items-center\">\n          <button className=\"btn btn-primary mr-3 mb-2\"\n            onClick={() => setVisibleAnswer(!visibleAnswer)}>\n            {visibleAnswer ? 'Hide' : 'Show'} Answer\n        </button>\n          {visibleAnswer && <span className=\"h5\">Answer: {answer}</span>}\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default Question;\n","import React, { useState } from 'react'\nimport { RouteComponentProps } from \"@reach/router\"\n\nconst Search: React.FC<RouteComponentProps & { submitSearch(searchTerm: string): void }> = (props) => {\n  const [query, setQuery] = useState('');\n\n  const getInfo = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    props.submitSearch(query)\n  }\n\n  return (\n    <form className=\"form-inline flex-nowrap my-2\" onSubmit={getInfo}>\n      <input className=\"form-control w-100 flex-grow-1\"\n        placeholder=\"Search questions...\"\n        onChange={e => setQuery(e.target.value)}\n      />\n      <button type=\"submit\" className=\"btn btn-outline-success flex-shrink-0\">Submit</button>\n    </form>\n  )\n}\n\nexport default Search\n","import React, { useState, useEffect } from 'react';\nimport { RouteComponentProps } from \"@reach/router\"\n\nimport Question, { questionModel } from './Question';\nimport Search from './Search';\n\nconst QuestionView: React.FC<RouteComponentProps> = (props) => {\n  const [state, setState] = useState({\n    questions: [] as questionModel[],\n    page: 1,\n    totalQuestions: 0,\n    categories: [] as { id: number, type: string }[],\n    currentCategory: null,\n  })\n\n  const getQuestions = (page?: number) => {\n    //TODO: update request URL\n    fetch(`/questions?page=${page || state.page}`).then(rsp => rsp.json()).then(result => {\n      setState({\n        ...state,\n        questions: result.questions,\n        totalQuestions: result.total_questions,\n        categories: result.categories,\n        currentCategory: result.current_category,\n        page: result.page\n      })\n      return;\n    }).catch(error => {\n      alert('Unable to load questions. Please try your request again')\n      return;\n    })\n\n  }\n\n  useEffect(getQuestions, [])\n\n  const selectPage = (num: number) => {\n    setState({ ...state, page: num });\n    getQuestions(num);\n  }\n\n  const createPagination = () => {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(state.totalQuestions / 10)\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(\n        <li key={i} className={`page-item ${i === state.page ? 'active' : ''}`}>\n          <button className=\"page-link\" onClick={() => { selectPage(i) }}>{i}</button>\n        </li>\n      )\n    }\n    return pageNumbers;\n  }\n\n  const getByCategory = (id: number) => {\n    //TODO: update request URL\n    fetch(`/categories/${id}/questions`).then(rsp => rsp.json()).then(result => {\n      setState({\n        ...state,\n        questions: result.questions,\n        totalQuestions: result.total_questions,\n        currentCategory: result.current_category\n      })\n      return;\n    }).catch(error => {\n      alert('Unable to load questions. Please try your request again')\n      return;\n    })\n  }\n\n  const submitSearch = (searchTerm: string) => fetch('/questions/search', {\n    method: 'POST',\n    mode: 'cors',\n    credentials: 'include',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ searchTerm: searchTerm }),\n  }).then(rsp => rsp.json()).then(result => {\n    setState({\n      ...state,\n      questions: result.questions,\n      totalQuestions: result.total_questions,\n      currentCategory: result.current_category\n    })\n    return;\n  }).catch(error => {\n    alert('Unable to load questions. Please try your request again')\n    return;\n  })\n\n  const questionAction = (id: number) => (action: string) => {\n    if (action === 'DELETE') {\n      if (window.confirm('are you sure you want to delete the question?')) {\n        //TODO: update request URL\n        fetch(`/questions/${id}`, { method: 'DELETE' }).then(rsp => rsp.json()).then(result => {\n          getQuestions();\n        }).catch(error => {\n          alert('Unable to load questions. Please try your request again')\n          return;\n        })\n      }\n    }\n  }\n\n  return (\n    <div className=\"row align-items-start\">\n      <div className=\"col-sm-4 col-lg-3 sticky-sm-top\">\n        <h2 onClick={() => { getQuestions() }}>Categories</h2>\n        <div className=\"flex-row justify-content-start align-items-stretch flex-sm-column btn-group-lg btn-group-vertical w-100\" style={{ overflow: 'auto' }}>\n          <button className={`${state.currentCategory == 0 ? 'btn btn-secondary' : 'btn'}`} onClick={() => getByCategory(0)}>ALL</button>\n          {state.categories.map(category => <button key={category.id} className={`${state.currentCategory == category.id ? 'btn btn-secondary' : 'btn'}`} onClick={() => { getByCategory(category.id) }}>\n            <img src={`${category.type.toLowerCase()}.svg`} alt={category.type} style={{ width: 28 }} />\n            <span className=\"px-1\">{category.type}</span>\n          </button>)}\n        </div>\n        <Search submitSearch={submitSearch} />\n      </div>\n      <div className=\"col\">\n        <h2>{state.categories.find(c => c.id == state.currentCategory)?.type || \"All\"} Questions</h2>\n        {state.questions.map((q, ind) => (\n          <Question\n            key={q.id}\n            question={q.question}\n            answer={q.answer}\n            category={state.categories.find(c => c.id == q.category)?.type || \"\"}\n            difficulty={q.difficulty}\n            questionAction={questionAction(q.id)}\n          />\n        ))}\n        <ul className=\"pagination justify-content-center\">\n          {createPagination()}\n        </ul>\n      </div>\n\n    </div>\n  );\n}\n\nexport default QuestionView;\n","import React from 'react';\nimport { Link } from \"@reach/router\"\n\nimport Brain from \"../images/brain.svg\"\n\nconst Header: React.FC = (props) =>\n  <div className=\"navbar navbar-expand navbar-dark bg-dark sticky-top\">\n    <Link className=\"navbar-brand\" to=\"/\">\n    <img src={Brain} width=\"30\" height=\"30\" alt=\"logo\" className=\"d-inline-block align-top mr-1\" loading=\"lazy\" />\n      Udacitrivia</Link>\n    <div className=\"navbar-nav\">\n      <Link getProps={({ isCurrent }) => isCurrent ? { className: \"nav-item nav-link active\" } : { className: \"nav-item nav-link\" }} to=\"/add\">Add</Link>\n      <Link getProps={({ isCurrent }) => isCurrent ? { className: \"nav-item nav-link active\" } : { className: \"nav-item nav-link\" }} to=\"/play\">Play</Link>\n    </div>\n  </div>\n\nexport default Header;\n","import React, { useState, useEffect } from 'react';\nimport { RouteComponentProps } from \"@reach/router\"\nimport { questionModel } from './Question';\n\nconst questionsPerPlay = 5;\n\nconst QuizView: React.FC<RouteComponentProps> = (props) => {\n  const [state, setState] = useState({\n    playing: false,\n    gameover: false,\n    quizCategory: 0,\n    previousQuestions: [] as number[],\n    showAnswer: false,\n    categories: [] as { id: number, type: string }[],\n    numCorrect: 0,\n    currentQuestion: {} as questionModel,\n    guess: '',\n  })\n\n  useEffect(() => {\n    //TODO: update request URL\n    fetch(`/categories`).then(rsp => rsp.json()).then(result => {\n      setState(prev => { return { ...prev, categories: result.categories } })\n      return;\n    }).catch(error => {\n      alert('Unable to load categories. Please try your request again')\n      return;\n    })\n  }, [])\n\n\n  const selectCategory = (id = 0) => {\n    setState({ ...state, quizCategory: id, playing: true })\n    getNextQuestion(id)\n  }\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.value })\n  }\n\n  const getNextQuestion = (category_id = state.quizCategory) => {\n    const previousQuestions = [...state.previousQuestions]\n    if (state.currentQuestion.id) { previousQuestions.push(state.currentQuestion.id) }\n\n    fetch('/quizzes', {\n      method: 'POST',\n      mode: 'cors',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ category_id: category_id.toString(), previous_questions: previousQuestions }),\n    }).then(rsp => rsp.json()).then(result => {\n      setState({\n        ...state,\n        quizCategory: category_id,\n        showAnswer: false,\n        previousQuestions: previousQuestions,\n        currentQuestion: result.question,\n        guess: '',\n        playing: true,\n        gameover: result.question ? false : true\n      })\n      return;\n    }).catch(error => {\n      alert('Unable to load question. Please try your request again')\n      return;\n    })\n  }\n\n  const submitGuess = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    let evaluate = evaluateAnswer()\n    setState({\n      ...state,\n      numCorrect: !evaluate ? state.numCorrect : state.numCorrect + 1,\n      showAnswer: true,\n    })\n  }\n\n  const restartGame = () => {\n    setState({\n      ...state,\n      playing: false,\n      gameover: false,\n      quizCategory: 0,\n      previousQuestions: [],\n      showAnswer: false,\n      numCorrect: 0,\n      currentQuestion: {} as questionModel,\n      guess: '',\n    })\n  }\n\n  const renderPrePlay = () => {\n    return (\n      <div className=\"w-75 mx-auto mt-5\">\n        <div className=\"h3 text-center\">Choose Category</div>\n        <div className=\"btn-group-lg btn-group-vertical w-100\" style={{ overflow: 'auto' }}>\n          <button className=\"btn\" onClick={() => selectCategory(0)}>ALL</button>\n          {state.categories.map(category => <button key={category.id} className=\"btn\" onClick={() => { selectCategory(category.id) }}>\n            <img src={`${category.type.toLowerCase()}.svg`} alt={category.type} style={{ width: 28 }} />\n            <span className=\"px-2\">{category.type}</span>\n          </button>)}\n        </div>\n      </div>\n    )\n  }\n\n  const renderFinalScore = () => {\n    return (\n      <div className=\"w-75 mx-auto mt-5 text-center\">\n        <div className=\"h3 mb-3\"> Your Final Score is {state.numCorrect}</div>\n        <button className=\"btn btn-primary\" onClick={restartGame}> Play Again? </button>\n      </div>\n    )\n  }\n\n  const evaluateAnswer = () => {\n    const formatGuess = state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\n    const answerArray = state.currentQuestion.answer.toLowerCase().split(' ');\n    return formatGuess == state.currentQuestion.answer.toLowerCase() || answerArray.includes(formatGuess)\n  }\n\n  const renderCorrectAnswer = () => {\n    let evaluate = evaluateAnswer()\n    return (\n      <div className=\"w-75 mx-auto mt-5\">\n        <div className=\"h5\">{state.currentQuestion.question}</div>\n        <div className={`alert alert-${evaluate ? 'success' : 'danger'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}\n          <br/>\n          {`${state.currentQuestion.answer} is the correct answer`}\n        </div>\n        <button className=\"btn btn-primary\" onClick={e => getNextQuestion()}> Next Question </button>\n      </div>\n    )\n  }\n\n  const renderPlay = () => {\n    return state.previousQuestions.length === questionsPerPlay || state.gameover\n      ? renderFinalScore()\n      : state.showAnswer\n        ? renderCorrectAnswer()\n        : (\n          <div className=\"w-75 mx-auto mt-5\">\n            <div className=\"h5\">{state.currentQuestion.question}</div>\n            <form className=\"form-inline flex-nowrap my-2\" onSubmit={submitGuess}>\n              <input type=\"text\" name=\"guess\" className=\"form-control w-100 flex-grow-1\" onChange={handleChange} />\n              <button type=\"submit\" className=\"btn btn-outline-success flex-shrink-0\">Submit Answer</button>\n            </form>\n          </div>\n        )\n  }\n\n\n  return state.playing\n    ? renderPlay()\n    : renderPrePlay()\n}\n\nexport default QuizView;\n","import React from 'react';\nimport { Router } from \"@reach/router\"\n\nimport FormView from './components/FormView';\nimport QuestionView from './components/QuestionView';\nimport Header from './components/Header';\nimport QuizView from './components/QuizView';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Router className=\"container-fluid py-3\">\n        <QuestionView path=\"/\" />\n        <FormView path=\"/add\" />\n        <QuizView path=\"/play\" />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}